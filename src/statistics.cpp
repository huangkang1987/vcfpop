/* Statistics Functions */

#include "vcfpop.h"

template struct RNG<double>;
template struct RNG<float >;
template TARGET void RNG<double>::Permute<VESSEL<double>*>(VESSEL<double>** a, int n);
template TARGET void RNG<float >::Permute<VESSEL<float >*>(VESSEL<float >** a, int n);
template TARGET void RNG<double>::Permute<int64>(int64* a, int n);
template TARGET void RNG<float >::Permute<int64>(int64* a, int n);
template TARGET void RNG<double>::Permute<ushort>(ushort* a, int n);
template TARGET void RNG<float >::Permute<ushort>(ushort* a, int n);
template TARGET void RNG<double>::Permute<int>(int* a, int n);
template TARGET void RNG<float >::Permute<int>(int* a, int n);

template TARGET int RNG<double>::Poly<double>(double* a, int n);
template TARGET int RNG<double>::PolyLog<double>(double* a, int n);
template TARGET void RNG<double>::Dirichlet<double, double>(double* res, double* a, int n);
template TARGET void RNG<double>::Dirichlet<double, double, int64>(double* res, double* a, int64* b, int n);
template TARGET void RNG<double>::Dirichlet<double, double, int>(double* res, double* a, int* b, int n);
template TARGET void RNG<float >::Dirichlet<float , float >(float * res, float * a, int n);
template TARGET void RNG<float >::Dirichlet<float , double>(float * res, double* a, int n);
template TARGET void RNG<float >::Dirichlet<double, double>(double* res, double* a, int n);
template TARGET void RNG<float >::Dirichlet<float , float , int  >(float * res, float * a, int* b, int n);
template TARGET void RNG<float >::Dirichlet<float , double, int64>(float * res, double* a, int64* b, int n);

#ifndef _RNG_FP64

TARGET RNG<double>::RNG()
{

}

TARGET RNG<double>::RNG(uint64 s, uint64 salt)
{
	s = MurmurHash64(s, salt);

	x = 0x159A55E5075BCD15 ^ (s);       //123456789, 362436069
	y = 0x054913331F123BB5 ^ (s << 6);  //521288629, 88675123

	*(uint*)&U1 = 0;
}

/* Get a random sequence from 0 ~ n-1 */
TARGET void RNG<double>::GetRandSeq(int* td, int n)
{
	for (int i = 0; i < n; ++i)
		td[i] = (int)((XorShift() << 16) | i);
	QuickSort(td, 0, n - 1);
	for (int i = 0; i < n; ++i)
		td[i] &= 0xFFFF;
}

/* Draw a uniform distriubted real number */
TARGET double RNG<double>::Uniform(double min, double max)
{
	return Uniform() * (max - min) + min;
}

/* Draw a uniform distriubted real number */
TARGET double RNG<double>::Uniform(double max)
{
	return Uniform() * max;
}

/* Draw a normally distriubted real number */
TARGET double RNG<double>::Normal()
{
	//normal distribution
	if (*(uint*)&U1 != 0)
	{
		double re = U1 * MySin(U2);
		*(uint*)&U1 = 0;
		return re;
	}

	volatile double v1 = Uniform();
	volatile double v2 = Uniform();

	U1 = MySqrt(-2.0 * log(v1));
	U2 = 2.0 * M_PI * v2;
	return U1 * MyCos(U2);
}

/* Draw a normally distriubted real number */
TARGET double RNG<double>::Normal(double mean, double std)
{
	return Normal() * std + mean;
}

/* Draw a polynormial distriubted integer */
template<typename T>
TARGET int RNG<double>::Poly(T* a, int n)
{
	//row unify
	double s = Sum(a, n) + MIN_FREQ * n;
	double t = Uniform(s);
	for (int i = 0; i < n; ++i)
	{
		if (t < a[i] + MIN_FREQ) return i;
		t -= a[i] + MIN_FREQ;
	}
	return n - 1;
}

/* Draw a polynormial distriubted integer with propoirtions in natural logarithm */
template<typename T>
TARGET int RNG<double>::PolyLog(T* a, int n)
{
	//proportional polynomial distribution, will overwrite a
	double maxval = GetMaxVal(a, n), s = MIN_FREQ * n;
	for (int i = 0; i < n; ++i)
	{
		double diff = a[i] - maxval;
		a[i] = diff < -23 ? MIN_FREQ : exp(diff);
		s += a[i];
	}

	double r = Uniform(s);
	for (int i = 0; i < n; ++i)
	{
		if (r < a[i]) return i;
		r -= a[i];
	}
	return n - 1;
}

/* Draw a polynormial distriubted integer with propoirtions in natural logarithm */
template<typename T>
TARGET int RNG<double>::PolyLog(T* a, int n, int sep)
{
	//proportional polynomial distribution, will overwrite a
	double maxval = GetMaxVal(a, n, sep), s = MIN_FREQ * n;
	for (int i = 0; i < n; ++i)
	{
		double diff = a[i * sep] - maxval;
		a[i * sep] = diff < -23 ? MIN_FREQ : exp(diff);
		s += a[i * sep];
	}

	double r = Uniform(s);
	for (int i = 0; i < n; ++i)
	{
		if (r < a[i * sep]) return i;
		r -= a[i * sep];
	}
	return n - 1;
}

/* Draw a real number from gamma distribution */
TARGET double RNG<double>::Gamma(double alpha, double beta)
{
	//gamma distribution
	if (alpha < 1)
	{
		//bug fixed on 20220816 to keep code sequence
		volatile double v1 = Gamma(1.0 + alpha, beta);
		volatile double v2 = pow(Uniform(), 1.0 / alpha);
		return v1 * v2;
	}
	double t, v, u;
	double d = alpha - 0.333333333333333;
	double c = 1.0 / (sqrt(d) * 3.0);

	for (;;)
	{
		do
		{
			t = Normal();
			volatile double v1 = c * t;
			v = 1.0 + v1;
		} while (v <= 0);

		v = v * v * v;
		u = Uniform();

		if (u < 1.0 - 0.0331 * t * t * t * t) break;
		if (log(u) < 0.5 * t * t + d * (1.0 - v + log(v))) break;
	}
	return beta * d * v;
}

/* Draw a real number from beta distribution */
TARGET double RNG<double>::Beta(double a, double b)
{
	//Beta distribution
	volatile double v1 = Gamma(a);
	volatile double v2 = Gamma(b);
	return v1 / (v1 + v2);
}

/* Draw a vector from Dirichlet distribution D(a1 f, a2 f, ...) */
template<typename T1, typename T2>
TARGET void RNG<double>::Dirichlet(T1* res, T2* a, int n, double f)
{
	//Dirichlet distribution
	double s = 0;
	for (int i = 0; i < n; ++i)
	{
		double v = Gamma(a[i] * f);
		res[i] = v;
		s += v;
	}
	Mul(res, (T1)(1.0 / s), n);
}

/* Draw a vector from Dirichlet distribution D(a1, a2, ...) */
template<typename T1, typename T2>
TARGET void RNG<double>::Dirichlet(T1* res, T2* a, int n)
{
	//Dirichlet distribution
	double s = 0;
	for (int i = 0; i < n; ++i)
	{
		double v = Gamma(a[i]);
		res[i] = v;
		s += v;
	}
	Mul(res, (T1)(1.0 / s), n);
}

/* Draw a vector from Dirichlet distribution D(a1 + b1, a2 + b2, ...) */
template<typename T1, typename T2, typename T3>
TARGET void RNG<double>::Dirichlet(T1* res, T2* a, T3* b, int n)
{
	//Dirichlet distribution
	double s = 0;
	for (int i = 0; i < n; ++i)
	{
		double v = Gamma((double)a[i] + (double)b[i]);
		res[i] = v;
		s += v;
	}
	Mul(res, (T1)(1.0 / s), n);
}

/* Shuffle an array */
template<typename T>
TARGET void RNG<double>::Permute(T* val, int n)
{
	//https://lemire.me/blog/2016/06/30/fast-random-shuffling/
	for (int i = n; i > 1; --i)
		Swap(val[i - 1], val[Next(i)]);
}

/* Draw a uniform distriubted interger */
TARGET uint64 RNG<double>::XorShift()
{
	//XorShift
	uint64 a = x, b = y;

	x = b;
	a ^= a << 23;
	a ^= a >> 18;
	a ^= b;
	a ^= b >> 5;
	y = a;

	return a + b;
}

TARGET uint64 RNG<double>::Next(uint64 min, uint64 max)
{
	// will not equal to max
	return XorShift() % (max - min) + min;
}

/* Draw a uniform distriubted interger */
TARGET uint64 RNG<double>::Next(uint64 max)
{
	// will not equal to max
	return XorShift() % max;
}

/* Draw a uniform distriubted real number */
TARGET double RNG<double>::Uniform()
{
	uint64 u = XorShift(), r = 0x3FF0000000000000;
	double& re = *(double*)&r;
	r |= u & 0x000FFFFFFFFFFFFF;
	return re - 1.0;
}

/* Draw a uniform distriubted interger and avoid sample av */
TARGET uint64 RNG<double>::NextAvoid(uint64 max, uint64 av)
{
	uint64 a = Next(max - 1);
	if (a >= av) a++;
	return a;
}

#endif

#ifndef _RNG_FP32
	/* Initialize rng */
	TARGET RNG<float>::RNG()
	{
	}

	/* Initialize rng */
	TARGET RNG<float>::RNG(uint64 seed, uint64 salt)
	{
		uint s = MurmurHash32(seed, salt);

		x = 0x075BCD15 ^ (s);
		y = 0x159A55E5 ^ (s << 3);
		z = 0x1F123BB5 ^ (s << 6);

		*(uint*)&U1 = 0;
	}

	/* Get a random sequence from 0 ~ n-1 */
	TARGET void RNG<float>::GetRandSeq(int* td, int n)
	{
		for (int i = 0; i < n; ++i)
			td[i] = (int)((XorShift() << 16) | i);
		QuickSort(td, 0, n - 1);
		for (int i = 0; i < n; ++i)
			td[i] &= 0xFFFF;
	}

	/* Draw a uniform distriubted real number */
	TARGET float RNG<float>::Uniform(float min, float max)
	{
		return Uniform() * (max - min) + min;
	}

	/* Draw a uniform distriubted real number */
	TARGET float RNG<float>::Uniform(float max)
	{
		return Uniform() * max;
	}

	/* Draw a normally distriubted real number */
	TARGET double RNG<float>::Normal()
	{
		//normal distribution
		if (*(uint*)&U1 != 0)
		{
			double re = U1 * MySin(U2);
			*(uint*)&U1 = 0;
			return re;
		}

		volatile double v1 = Uniform();
		volatile double v2 = Uniform();
		U1 = MySqrt(-2.0 * log(Max(MIN_FREQ, v1)));
		U2 = 2.0 * M_PI * v2;
		return U1 * MyCos(U2);
	}

	/* Draw a normally distriubted real number */
	TARGET double RNG<float>::Normal(double mean, double std)
	{
		return Normal() * std + mean;
	}

	/* Draw a polynormial distriubted integer
	TARGET int RNG<float>::Poly(double* a, int n)
	{
		//row unify
		double s = Sum(a, n) + MIN_FREQ * n;
		double t = Uniform(s);
		for (int i = 0; i < n; ++i)
		{
			if (t < a[i] + MIN_FREQ) return i;
			t -= a[i] + MIN_FREQ;
		}
		return n - 1;
	}
	 */

	/* Draw a polynormial distriubted integer */
	TARGET int RNG<float>::Poly(float* a, int n)
	{
		//row unify 
		volatile float v1 = (float)MIN_FREQ;
		for (int i = 0; i < n; ++i)
			a[i] += v1;

		float s = Sumx(a, n);
		float t = Uniform(s);
		for (int i = 0; i < n; ++i)
		{
			if (t < a[i]) return i;
			t -= a[i];
		}
		return n - 1;
	}

	/* Draw a polynormial distriubted integer with propoirtions in natural logarithm */
	TARGET int RNG<float>::PolyLog(float* a, int n)
	{
		//proportional polynomial distribution, will overwrite a
		float maxval = GetMaxVal(a, n), s = (float)MIN_FREQ * n;
		for (int i = 0; i < n; ++i)
		{
			float diff = a[i] - maxval;
			a[i] = diff < -23 ? (float)MIN_FREQ : exp(diff);
			s += a[i];
		}

		float r = Uniform(s);
		for (int i = 0; i < n; ++i)
		{
			if (r < a[i]) return i;
			r -= a[i];
		}
		return n - 1;
	}

	/* Draw a polynormial distriubted integer with propoirtions in natural logarithm */
	TARGET int RNG<float>::PolyLog(double* a, int n)
	{
		//proportional polynomial distribution, will overwrite a
		double maxval = GetMaxVal(a, n), s = (float)MIN_FREQ * n;
		for (int i = 0; i < n; ++i)
		{
			double diff = a[i] - maxval;
			a[i] = diff < -23 ? (float)MIN_FREQ : exp(diff);
			s += a[i];
		}

		double r = Uniform(s);
		for (int i = 0; i < n; ++i)
		{
			if (r < a[i]) return i;
			r -= a[i];
		}
		return n - 1;
	}

	/* Draw a polynormial distriubted integer with propoirtions in natural logarithm */
	TARGET int RNG<float>::PolyLog(float* a, int n, int sep)
	{
		//proportional polynomial distribution, will overwrite a
		float maxval = GetMaxVal(a, n, sep), s = (float)MIN_FREQ * n;
		for (int i = 0; i < n; ++i)
		{
			float diff = a[i * sep] - maxval;
			a[i * sep] = diff < -23 ? (float)MIN_FREQ : exp(diff);
			s += a[i * sep];
		}

		float r = Uniform(s);
		for (int i = 0; i < n; ++i)
		{
			if (r < a[i * sep]) return i;
			r -= a[i * sep];
		}
		return n - 1;
	}

	/* Draw a real number from gamma distribution */
	TARGET double RNG<float>::Gamma(double alpha, double beta)
	{
		//gamma distribution
		if (alpha < 1)
		{
			//bug fixed on 20220816 to keep code sequence
			volatile double v1 = Gamma(1.0 + alpha, beta);
			volatile double v2 = pow(Uniform(), 1.0 / alpha);
			return v1 * v2;
		}
		double t, v, u;
		double d = alpha - 0.333333333333333;
		double c = 1.0 / (sqrt(d) * 3.0);

		for (;;)
		{
			do
			{
				t = Normal();
				v = 1.0 + c * t;
			} while (v <= 0);

			v = v * v * v;
			u = Uniform();

			if (u < 1.0 - 0.0331 * t * t * t * t) break;
			if (log(u) < 0.5 * t * t + d * (1.0 - v + log(v))) break;
		}
		return beta * d * v;
	}

	/* Draw a real number from beta distribution */
	TARGET double RNG<float>::Beta(double a, double b)
	{
		//Beta distribution
		volatile double v1 = Gamma(a);
		volatile double v2 = Gamma(b);
		return v1 / (v1 + v2);
	}

	/* Draw a vector from Dirichlet distribution D(a1 f, a2 f, ...) */
	template<typename T1, typename T2>
	TARGET void RNG<float>::Dirichlet(T1 * res, T2 * a, int n, double f)
	{
		//Dirichlet distribution
		double s = 0;
		for (int i = 0; i < n; ++i)
		{
			double v = Gamma((double)a[i] * f);
			res[i] = (T1)v;
			s += v;
		}
		Mul(res, (T1)(1.0 / s), n);
	}

	/* Draw a vector from Dirichlet distribution D(a1, a2, ...) */
	template<typename T1, typename T2>
	TARGET void RNG<float>::Dirichlet(T1 * res, T2 * a, int n)
	{
		//Dirichlet distribution
		double s = 0;
		for (int i = 0; i < n; ++i)
		{
			double v = Gamma((double)a[i]);
			res[i] = (T1)v;
			s += v;
		}
		Mul(res, (T1)(1.0 / s), n);
	}

	/* Draw a vector from Dirichlet distribution D(a1 + b1, a2 + b2, ...) */
	template<typename T1, typename T2, typename T3>
	TARGET void RNG<float>::Dirichlet(T1 * res, T2 * a, T3 * b, int n)
	{
		//Dirichlet distribution
		double s = 0;
		for (T3 i = 0; i < n; ++i)
		{
			double v = Gamma((double)a[i] + (double)b[i]);
			res[i] = (T1)v;
			s += v;
		}
		Mul(res, (T1)(1.0 / s), n);
	}

	/* Shuffle an array */
	template<typename T>
	TARGET void RNG<float>::Permute(T * val, int n)
	{
		//https://lemire.me/blog/2016/06/30/fast-random-shuffling/
		for (int i = n; i > 1; --i)
			Swap(val[i - 1], val[Next(i)]);
	}

	/* Draw a uniform distriubted interger */
	TARGET uint RNG<float>::XorShift()
	{
		//XorShift96
		uint t;
		x ^= x << 16;
		x ^= x >> 5;
		x ^= x << 1;
		t = x;
		x = y;
		y = z;
		z = t ^ x ^ y;
		return z;
	}

	/* Draw a uniform distriubted real number */
	TARGET float RNG<float>::Uniform()
	{
		uint u = XorShift(), r = 0x3F800000;
		float& re = *(float*)&r;
		r |= u & 0x007FFFFF;
		return re - 1.0f;
	}

	/* Draw a uniform distriubted interger */
	TARGET uint RNG<float>::Next(uint min, uint max)
	{
		// will not equal to max
		return XorShift() % (max - min) + min;
	}

	/* Draw a uniform distriubted interger */
	TARGET uint RNG<float>::Next(uint max)
	{
		// will not equal to max
		return XorShift() % max;
	}

	/* Draw a uniform distriubted interger and avoid sample av */
	TARGET uint RNG<float>::NextAvoid(uint max, uint av)
	{
		uint a = Next(max - 1);
		if (a >= av) a++;
		return a;
	}
#endif

/* Gamma function */
TARGET double Gamma1(double x)
{
	static double gam1_coef[] = { 0.99999999999980993, 676.5203681218851, -1259.1392167224028, 771.32342877765313, -176.61502916214059, 12.507343278686905, -0.13857109526572012, 9.9843695780195716E-6, 1.5056327351493116E-7 };
	int g = 7;
	if (x < 0.5) return M_PI / (MySin(M_PI * x) * Gamma1(1 - x));
	x -= 1;
	double a = gam1_coef[0];
	double t = x + g + 0.5;
	for (int i = 1; i < 9; ++i)
		a += gam1_coef[i] / (x + i);
	return 2.5066282746310005 * pow(t, x + 0.5) * exp(-t) * a;
}

/* Natural logarithm of Gamma function */
TARGET double LogGamma1(double x)
{
	static double re[] = { 0,0.00000000000000E+00,0.00000000000000E+00,6.93147180559945E-01,1.79175946922805E+00,3.17805383034795E+00,4.78749174278205E+00,6.57925121201010E+00,8.52516136106541E+00,1.06046029027453E+01,1.28018274800815E+01,1.51044125730755E+01,1.75023078458739E+01,1.99872144956619E+01,2.25521638531234E+01,2.51912211827387E+01,2.78992713838409E+01,3.06718601060807E+01,3.35050734501369E+01,3.63954452080331E+01,3.93398841871995E+01,4.23356164607535E+01,4.53801388984769E+01,4.84711813518352E+01,5.16066755677644E+01,5.47847293981123E+01,5.80036052229805E+01,6.12617017610020E+01,6.45575386270063E+01,6.78897431371815E+01,7.12570389671680E+01,7.46582363488302E+01,7.80922235533153E+01,8.15579594561150E+01,8.50544670175815E+01,8.85808275421977E+01,9.21361756036871E+01,9.57196945421432E+01,9.93306124547874E+01,1.02968198614514E+02,1.06631760260643E+02,1.10320639714757E+02,1.14034211781462E+02,1.17771881399745E+02,1.21533081515439E+02,1.25317271149357E+02,1.29123933639127E+02,1.32952575035616E+02,1.36802722637326E+02,1.40673923648234E+02,1.44565743946345E+02,1.48477766951773E+02,1.52409592584497E+02,1.56360836303079E+02,1.60331128216631E+02,1.64320112263195E+02,1.68327445448428E+02,1.72352797139163E+02,1.76395848406997E+02,1.80456291417544E+02,1.84533828861449E+02,1.88628173423672E+02,1.92739047287845E+02,1.96866181672890E+02,2.01009316399282E+02,2.05168199482641E+02,2.09342586752537E+02,2.13532241494563E+02,2.17736934113954E+02,2.21956441819130E+02,2.26190548323728E+02,2.30439043565777E+02,2.34701723442818E+02,2.38978389561834E+02,2.43268849002983E+02,2.47572914096187E+02,2.51890402209723E+02,2.56221135550010E+02,2.60564940971863E+02,2.64921649798553E+02,2.69291097651020E+02,2.73673124285694E+02,2.78067573440366E+02,2.82474292687630E+02,2.86893133295427E+02,2.91323950094270E+02,2.95766601350761E+02,3.00220948647014E+02,3.04686856765669E+02,3.09164193580147E+02,3.13652829949879E+02,3.18152639620209E+02,3.22663499126726E+02,3.27185287703775E+02,3.31717887196928E+02,3.36261181979198E+02,3.40815058870799E+02,3.45379407062267E+02,3.49954118040770E+02,3.54539085519441E+02,3.59134205369575E+02,3.63739375555563E+02,3.68354496072405E+02,3.72979468885689E+02,3.77614197873919E+02,3.82258588773060E+02,3.86912549123218E+02,3.91575988217330E+02,3.96248817051791E+02,4.00930948278916E+02,4.05622296161145E+02,4.10322776526937E+02,4.15032306728250E+02,4.19750805599545E+02,4.24478193418257E+02,4.29214391866652E+02,4.33959323995015E+02,4.38712914186121E+02,4.43475088120919E+02,4.48245772745385E+02,4.53024896238496E+02,4.57812387981278E+02,4.62608178526875E+02,4.67412199571608E+02,4.72224383926981E+02,4.77044665492586E+02,4.81872979229888E+02,4.86709261136839E+02,4.91553448223298E+02,4.96405478487218E+02,5.01265290891579E+02,5.06132825342035E+02,5.11008022665236E+02,5.15890824587823E+02,5.20781173716044E+02,5.25679013515995E+02,5.30584288294434E+02,5.35496943180170E+02,5.40416924105998E+02,5.45344177791155E+02,5.50278651724286E+02,5.55220294146895E+02,5.60169054037273E+02,5.65124881094874E+02,5.70087725725134E+02,5.75057539024710E+02,5.80034272767131E+02,5.85017879388839E+02,5.90008311975618E+02,5.95005524249382E+02,6.00009470555327E+02,6.05020105849424E+02,6.10037385686239E+02,6.15061266207085E+02,6.20091704128477E+02,6.25128656730891E+02,6.30172081847810E+02,6.35221937855060E+02,6.40278183660408E+02,6.45340778693435E+02,6.50409682895655E+02,6.55484856710889E+02,6.60566261075874E+02,6.65653857411106E+02,6.70747607611913E+02,6.75847474039737E+02,6.80953419513638E+02,6.86065407301994E+02,6.91183401114411E+02,6.96307365093814E+02,7.01437263808737E+02,7.06573062245787E+02,7.11714725802290E+02,7.16862220279104E+02,7.22015511873601E+02,7.27174567172816E+02,7.32339353146739E+02,7.37509837141777E+02,7.42685986874351E+02,7.47867770424643E+02,7.53055156230484E+02,7.58248113081374E+02,7.63446610112640E+02,7.68650616799717E+02,7.73860102952558E+02,7.79075038710167E+02,7.84295394535246E+02,7.89521141208959E+02,7.94752249825813E+02,7.99988691788643E+02,8.05230438803703E+02,8.10477462875864E+02,8.15729736303910E+02,8.20987231675938E+02,8.26249921864843E+02,8.31517780023906E+02,8.36790779582470E+02,8.42068894241700E+02,8.47352097970438E+02,8.52640365001133E+02,8.57933669825857E+02,8.63231987192405E+02,8.68535292100465E+02,8.73843559797866E+02,8.79156765776908E+02,8.84474885770752E+02,8.89797895749890E+02,8.95125771918680E+02,9.00458490711945E+02,9.05796028791646E+02,9.11138363043611E+02,9.16485470574329E+02,9.21837328707805E+02,9.27193914982477E+02,9.32555207148186E+02,9.37921183163208E+02,9.43291821191336E+02,9.48667099599020E+02,9.54046996952560E+02,9.59431492015349E+02,9.64820563745166E+02,9.70214191291518E+02,9.75612353993036E+02,9.81015031374908E+02,9.86422203146368E+02,9.91833849198223E+02,9.97249949600428E+02,1.00267048459970E+03,1.00809543461718E+03,1.01352478024614E+03,1.01895850224969E+03,1.02439658155861E+03,1.02983899926914E+03,1.03528573664080E+03,1.04073677509437E+03,1.04619209620972E+03,1.05165168172387E+03,1.05711551352890E+03,1.06258357367003E+03,1.06805584434370E+03,1.07353230789563E+03,1.07901294681897E+03,1.08449774375247E+03,1.08998668147862E+03,1.09547974292196E+03,1.10097691114726E+03,1.10647816935780E+03,1.11198350089373E+03,1.11749288923036E+03,1.12300631797653E+03,1.12852377087299E+03,1.13404523179085E+03,1.13957068472998E+03,1.14510011381750E+03,1.15063350330622E+03,1.15617083757324E+03,1.16171210111840E+03,1.16725727856288E+03,1.17280635464778E+03,1.17835931423270E+03,1.18391614229440E+03,1.18947682392541E+03,1.19504134433273E+03,1.20060968883650E+03,1.20618184286867E+03,1.21175779197182E+03,1.21733752179781E+03,1.22292101810659E+03,1.22850826676499E+03,1.23409925374550E+03,1.23969396512510E+03,1.24529238708410E+03,1.25089450590498E+03,1.25650030797128E+03,1.26210977976646E+03,1.26772290787285E+03,1.27333967897051E+03,1.27896007983623E+03,1.28458409734242E+03,1.29021171845611E+03,1.29584293023793E+03,1.30147771984110E+03,1.30711607451043E+03,1.31275798158137E+03,1.31840342847902E+03,1.32405240271718E+03,1.32970489189745E+03,1.33536088370827E+03,1.34102036592402E+03,1.34668332640416E+03,1.35234975309227E+03,1.35801963401525E+03,1.36369295728243E+03,1.36936971108469E+03,1.37504988369371E+03,1.38073346346105E+03,1.38642043881739E+03,1.39211079827171E+03,1.39780453041052E+03,1.40350162389702E+03,1.40920206747041E+03,1.41490584994507E+03,1.42061296020982E+03,1.42632338722719E+03,1.43203712003270E+03,1.43775414773411E+03,1.44347445951071E+03,1.44919804461267E+03,1.45492489236025E+03,1.46065499214323E+03,1.46638833342013E+03,1.47212490571760E+03,1.47786469862978E+03,1.48360770181759E+03,1.48935390500813E+03,1.49510329799404E+03,1.50085587063287E+03,1.50661161284645E+03,1.51237051462033E+03,1.51813256600311E+03,1.52389775710590E+03,1.52966607810169E+03,1.53543751922482E+03,1.54121207077037E+03,1.54698972309359E+03,1.55277046660938E+03,1.55855429179171E+03,1.56434118917308E+03,1.57013114934397E+03,1.57592416295236E+03,1.58172022070312E+03,1.58751931335758E+03,1.59332143173296E+03,1.59912656670188E+03,1.60493470919186E+03,1.61074585018483E+03,1.61655998071666E+03,1.62237709187662E+03,1.62819717480697E+03,1.63402022070246E+03,1.63984622080984E+03,1.64567516642745E+03,1.65150704890473E+03,1.65734185964179E+03,1.66317959008896E+03,1.66902023174633E+03,1.67486377616337E+03,1.68071021493842E+03,1.68655953971837E+03,1.69241174219814E+03,1.69826681412035E+03,1.70412474727483E+03,1.70998553349830E+03,1.71584916467389E+03,1.72171563273083E+03,1.72758492964396E+03,1.73345704743344E+03,1.73933197816429E+03,1.74520971394607E+03,1.75109024693247E+03,1.75697356932096E+03,1.76285967335241E+03,1.76874855131074E+03,1.77464019552257E+03,1.78053459835683E+03,1.78643175222447E+03,1.79233164957805E+03,1.79823428291145E+03,1.80413964475951E+03,1.81004772769768E+03,1.81595852434172E+03,1.82187202734735E+03,1.82778822940996E+03,1.83370712326423E+03,1.83962870168388E+03,1.84555295748129E+03,1.85147988350726E+03,1.85740947265065E+03,1.86334171783810E+03,1.86927661203372E+03,1.87521414823880E+03,1.88115431949152E+03,1.88709711886665E+03,1.89304253947526E+03,1.89899057446444E+03,1.90494121701703E+03,1.91089446035131E+03,1.91685029772078E+03,1.92280872241381E+03,1.92876972775343E+03,1.93473330709705E+03,1.94069945383617E+03,1.94666816139616E+03,1.95263942323595E+03,1.95861323284782E+03,1.96458958375712E+03,1.97056846952202E+03,1.97654988373327E+03,1.98253382001396E+03,1.98852027201924E+03,1.99450923343613E+03,2.00050069798324E+03,2.00649465941055E+03,2.01249111149917E+03,2.01849004806111E+03,2.02449146293907E+03,2.03049535000618E+03,2.03650170316578E+03,2.04251051635123E+03,2.04852178352563E+03,2.05453549868167E+03,2.06055165584137E+03,2.06657024905587E+03,2.07259127240522E+03,2.07861471999818E+03,2.08464058597200E+03,2.09066886449223E+03,2.09669954975249E+03,2.10273263597429E+03,2.10876811740682E+03,2.11480598832674E+03,2.12084624303802E+03,2.12688887587170E+03,2.13293388118574E+03,2.13898125336478E+03,2.14503098682002E+03,2.15108307598894E+03,2.15713751533521E+03,2.16319429934844E+03,2.16925342254402E+03,2.17531487946295E+03,2.18137866467163E+03,2.18744477276174E+03,2.19351319834998E+03,2.19958393607799E+03,2.20565698061209E+03,2.21173232664317E+03,2.21780996888652E+03,2.22388990208162E+03,2.22997212099199E+03,2.23605662040507E+03,2.24214339513198E+03,2.24823244000743E+03,2.25432374988951E+03,2.26041731965955E+03,2.26651314422198E+03,2.27261121850415E+03,2.27871153745617E+03,2.28481409605078E+03,2.29091888928320E+03,2.29702591217094E+03,2.30313515975371E+03,2.30924662709321E+03,2.31536030927304E+03,2.32147620139852E+03,2.32759429859657E+03,2.33371459601552E+03,2.33983708882503E+03,2.34596177221593E+03,2.35208864140004E+03,2.35821769161010E+03,2.36434891809958E+03,2.37048231614258E+03,2.37661788103366E+03,2.38275560808775E+03,2.38889549263997E+03,2.39503753004556E+03,2.40118171567969E+03,2.40732804493736E+03,2.41347651323327E+03,2.41962711600172E+03,2.42577984869642E+03,2.43193470679044E+03,2.43809168577603E+03,2.44425078116452E+03,2.45041198848621E+03,2.45657530329025E+03,2.46274072114448E+03,2.46890823763537E+03,2.47507784836786E+03,2.48124954896527E+03,2.48742333506917E+03,2.49359920233928E+03,2.49977714645333E+03,2.50595716310698E+03,2.51213924801370E+03,2.51832339690463E+03,2.52450960552853E+03,2.53069786965162E+03,2.53688818505747E+03,2.54308054754695E+03,2.54927495293805E+03,2.55547139706584E+03,2.56166987578234E+03,2.56787038495638E+03,2.57407292047357E+03,2.58027747823614E+03,2.58648405416286E+03,2.59269264418896E+03,2.59890324426598E+03,2.60511585036173E+03,2.61133045846016E+03,2.61754706456124E+03,2.62376566468093E+03,2.62998625485103E+03,2.63620883111910E+03,2.64243338954838E+03,2.64865992621767E+03,2.65488843722126E+03,2.66111891866884E+03,2.66735136668539E+03,2.67358577741111E+03,2.67982214700131E+03,2.68606047162635E+03,2.69230074747152E+03,2.69854297073697E+03,2.70478713763764E+03,2.71103324440312E+03,2.71728128727763E+03,2.72353126251989E+03,2.72978316640305E+03,2.73603699521463E+03,2.74229274525638E+03,2.74855041284427E+03,2.75480999430833E+03,2.76107148599265E+03,2.76733488425524E+03,2.77360018546798E+03,2.77986738601652E+03,2.78613648230023E+03,2.79240747073209E+03,2.79868034773863E+03,2.80495510975987E+03,2.81123175324922E+03,2.81751027467338E+03,2.82379067051234E+03,2.83007293725924E+03,2.83635707142031E+03,2.84264306951482E+03,2.84893092807498E+03,2.85522064364589E+03,2.86151221278545E+03,2.86780563206429E+03,2.87410089806573E+03,2.88039800738567E+03,2.88669695663252E+03,2.89299774242719E+03,2.89930036140293E+03,2.90560481020535E+03,2.91191108549230E+03,2.91821918393381E+03,2.92452910221204E+03,2.93084083702119E+03,2.93715438506747E+03,2.94346974306899E+03,2.94978690775574E+03,2.95610587586948E+03,2.96242664416373E+03,2.96874920940366E+03,2.97507356836604E+03,2.98139971783920E+03,2.98772765462293E+03,2.99405737552845E+03,3.00038887737834E+03,3.00672215700648E+03,3.01305721125798E+03,3.01939403698913E+03,3.02573263106733E+03,3.03207299037106E+03,3.03841511178978E+03,3.04475899222391E+03,3.05110462858473E+03,3.05745201779439E+03,3.06380115678577E+03,3.07015204250248E+03,3.07650467189880E+03,3.08285904193960E+03,3.08921514960030E+03,3.09557299186681E+03,3.10193256573548E+03,3.10829386821305E+03,3.11465689631659E+03,3.12102164707344E+03,3.12738811752117E+03,3.13375630470753E+03,3.14012620569035E+03,3.14649781753758E+03,3.15287113732716E+03,3.15924616214699E+03,3.16562288909489E+03,3.17200131527854E+03,3.17838143781544E+03,3.18476325383285E+03,3.19114676046773E+03,3.19753195486673E+03,3.20391883418609E+03,3.21030739559164E+03,3.21669763625870E+03,3.22308955337209E+03,3.22948314412604E+03,3.23587840572416E+03,3.24227533537938E+03,3.24867393031391E+03,3.25507418775922E+03,3.26147610495595E+03,3.26787967915388E+03,3.27428490761191E+03,3.28069178759798E+03,3.28710031638904E+03,3.29351049127101E+03,3.29992230953872E+03,3.30633576849589E+03,3.31275086545506E+03,3.31916759773757E+03,3.32558596267351E+03,3.33200595760165E+03,3.33842757986946E+03,3.34485082683299E+03,3.35127569585690E+03,3.35770218431436E+03,3.36413028958704E+03,3.37056000906508E+03,3.37699134014701E+03,3.38342428023975E+03,3.38985882675854E+03,3.39629497712691E+03,3.40273272877665E+03,3.40917207914775E+03,3.41561302568838E+03,3.42205556585485E+03,3.42849969711155E+03,3.43494541693093E+03,3.44139272279347E+03,3.44784161218762E+03,3.45429208260977E+03,3.46074413156420E+03,3.46719775656310E+03,3.47365295512644E+03,3.48010972478201E+03,3.48656806306535E+03,3.49302796751973E+03,3.49948943569608E+03,3.50595246515300E+03,3.51241705345669E+03,3.51888319818093E+03,3.52535089690704E+03,3.53182014722383E+03,3.53829094672761E+03,3.54476329302212E+03,3.55123718371847E+03,3.55771261643517E+03,3.56418958879806E+03,3.57066809844027E+03,3.57714814300220E+03,3.58362972013147E+03,3.59011282748293E+03,3.59659746271857E+03,3.60308362350751E+03,3.60957130752599E+03,3.61606051245732E+03,3.62255123599182E+03,3.62904347582684E+03,3.63553722966669E+03,3.64203249522263E+03,3.64852927021282E+03,3.65502755236229E+03,3.66152733940295E+03,3.66802862907349E+03,3.67453141911940E+03,3.68103570729294E+03,3.68754149135307E+03,3.69404876906546E+03,3.70055753820243E+03,3.70706779654295E+03,3.71357954187259E+03,3.72009277198351E+03,3.72660748467438E+03,3.73312367775042E+03,3.73964134902333E+03,3.74616049631127E+03,3.75268111743883E+03,3.75920321023700E+03,3.76572677254315E+03,3.77225180220100E+03,3.77877829706057E+03,3.78530625497819E+03,3.79183567381645E+03,3.79836655144418E+03,3.80489888573640E+03,3.81143267457433E+03,3.81796791584535E+03,3.82450460744294E+03,3.83104274726671E+03,3.83758233322232E+03,3.84412336322151E+03,3.85066583518202E+03,3.85720974702759E+03,3.86375509668792E+03,3.87030188209868E+03,3.87685010120144E+03,3.88339975194368E+03,3.88995083227872E+03,3.89650334016576E+03,3.90305727356978E+03,3.90961263046159E+03,3.91616940881775E+03,3.92272760662056E+03,3.92928722185806E+03,3.93584825252395E+03,3.94241069661765E+03,3.94897455214418E+03,3.95553981711421E+03,3.96210648954402E+03,3.96867456745543E+03,3.97524404887584E+03,3.98181493183818E+03,3.98838721438088E+03,3.99496089454784E+03,4.00153597038844E+03,4.00811243995749E+03,4.01469030131521E+03,4.02126955252722E+03,4.02785019166450E+03,4.03443221680339E+03,4.04101562602555E+03,4.04760041741794E+03,4.05418658907279E+03,4.06077413908762E+03,4.06736306556515E+03,4.07395336661335E+03,4.08054504034536E+03,4.08713808487950E+03,4.09373249833925E+03,4.10032827885321E+03,4.10692542455510E+03,4.11352393358371E+03,4.12012380408292E+03,4.12672503420165E+03,4.13332762209384E+03,4.13993156591844E+03,4.14653686383939E+03,4.15314351402559E+03,4.15975151465088E+03,4.16636086389405E+03,4.17297155993877E+03,4.17958360097360E+03,4.18619698519198E+03,4.19281171079219E+03,4.19942777597732E+03,4.20604517895529E+03,4.21266391793881E+03,4.21928399114534E+03,4.22590539679711E+03,4.23252813312106E+03,4.23915219834886E+03,4.24577759071686E+03,4.25240430846611E+03,4.25903234984229E+03,4.26566171309573E+03,4.27229239648137E+03,4.27892439825877E+03,4.28555771669205E+03,4.29219235004991E+03,4.29882829660560E+03,4.30546555463688E+03,4.31210412242605E+03,4.31874399825987E+03,4.32538518042961E+03,4.33202766723098E+03,4.33867145696413E+03,4.34531654793363E+03,4.35196293844848E+03,4.35861062682205E+03,4.36525961137207E+03,4.37190989042066E+03,4.37856146229425E+03,4.38521432532360E+03,4.39186847784378E+03,4.39852391819415E+03,4.40518064471833E+03,4.41183865576420E+03,4.41849794968389E+03,4.42515852483372E+03,4.43182037957427E+03,4.43848351227026E+03,4.44514792129061E+03,4.45181360500839E+03,4.45848056180082E+03,4.46514879004924E+03,4.47181828813910E+03,4.47848905445994E+03,4.48516108740540E+03,4.49183438537317E+03,4.49850894676499E+03,4.50518476998662E+03,4.51186185344787E+03,4.51854019556252E+03,4.52521979474837E+03,4.53190064942716E+03,4.53858275802461E+03,4.54526611897037E+03,4.55195073069804E+03,4.55863659164511E+03,4.56532370025298E+03,4.57201205496692E+03,4.57870165423610E+03,4.58539249651352E+03,4.59208458025603E+03,4.59877790392430E+03,4.60547246598282E+03,4.61216826489988E+03,4.61886529914754E+03,4.62556356720166E+03,4.63226306754182E+03,4.63896379865137E+03,4.64566575901737E+03,4.65236894713061E+03,4.65907336148558E+03,4.66577900058044E+03,4.67248586291704E+03,4.67919394700089E+03,4.68590325134115E+03,4.69261377445060E+03,4.69932551484566E+03,4.70603847104634E+03,4.71275264157624E+03,4.71946802496258E+03,4.72618461973610E+03,4.73290242443112E+03,4.73962143758551E+03,4.74634165774064E+03,4.75306308344144E+03,4.75978571323629E+03,4.76650954567711E+03,4.77323457931928E+03,4.77996081272164E+03,4.78668824444649E+03,4.79341687305957E+03,4.80014669713006E+03,4.80687771523055E+03,4.81360992593701E+03,4.82034332782885E+03,4.82707791948882E+03,4.83381369950307E+03,4.84055066646107E+03,4.84728881895566E+03,4.85402815558302E+03,4.86076867494263E+03,4.86751037563728E+03,4.87425325627307E+03,4.88099731545938E+03,4.88774255180887E+03,4.89448896393744E+03,4.90123655046427E+03,4.90798531001176E+03,4.91473524120555E+03,4.92148634267449E+03,4.92823861305063E+03,4.93499205096923E+03,4.94174665506871E+03,4.94850242399070E+03,4.95525935637994E+03,4.96201745088437E+03,4.96877670615504E+03,4.97553712084612E+03,4.98229869361492E+03,4.98906142312186E+03,4.99582530803042E+03,5.00259034700720E+03,5.00935653872186E+03,5.01612388184712E+03,5.02289237505877E+03,5.02966201703563E+03,5.03643280645953E+03,5.04320474201537E+03,5.04997782239103E+03,5.05675204627739E+03,5.06352741236832E+03,5.07030391936070E+03,5.07708156595433E+03,5.08386035085202E+03,5.09064027275949E+03,5.09742133038542E+03,5.10420352244143E+03,5.11098684764204E+03,5.11777130470467E+03,5.12455689234968E+03,5.13134360930029E+03,5.13813145428260E+03,5.14492042602559E+03,5.15171052326110E+03,5.15850174472383E+03,5.16529408915130E+03,5.17208755528388E+03,5.17888214186475E+03,5.18567784763993E+03,5.19247467135820E+03,5.19927261177118E+03,5.20607166763324E+03,5.21287183770154E+03,5.21967312073601E+03,5.22647551549934E+03,5.23327902075694E+03,5.24008363527701E+03,5.24688935783042E+03,5.25369618719081E+03,5.26050412213452E+03,5.26731316144056E+03,5.27412330389067E+03,5.28093454826928E+03,5.28774689336345E+03,5.29456033796296E+03,5.30137488086022E+03,5.30819052085030E+03,5.31500725673089E+03,5.32182508730235E+03,5.32864401136762E+03,5.33546402773230E+03,5.34228513520455E+03,5.34910733259517E+03,5.35593061871753E+03,5.36275499238757E+03,5.36958045242383E+03,5.37640699764738E+03,5.38323462688189E+03,5.39006333895353E+03,5.39689313269104E+03,5.40372400692569E+03,5.41055596049125E+03,5.41738899222404E+03,5.42422310096285E+03,5.43105828554900E+03,5.43789454482628E+03,5.44473187764096E+03,5.45157028284181E+03,5.45840975928003E+03,5.46525030580933E+03,5.47209192128581E+03,5.47893460456804E+03,5.48577835451705E+03,5.49262316999626E+03,5.49946904987152E+03,5.50631599301111E+03,5.51316399828568E+03,5.52001306456832E+03,5.52686319073446E+03,5.53371437566196E+03,5.54056661823101E+03,5.54741991732419E+03,5.55427427182645E+03,5.56112968062506E+03,5.56798614260965E+03,5.57484365667220E+03,5.58170222170699E+03,5.58856183661065E+03,5.59542250028209E+03,5.60228421162257E+03,5.60914696953563E+03,5.61601077292708E+03,5.62287562070505E+03,5.62974151177993E+03,5.63660844506439E+03,5.64347641947337E+03,5.65034543392403E+03,5.65721548733583E+03,5.66408657863044E+03,5.67095870673178E+03,5.67783187056599E+03,5.68470606906144E+03,5.69158130114872E+03,5.69845756576061E+03,5.70533486183211E+03,5.71221318830040E+03,5.71909254410486E+03,5.72597292818705E+03,5.73285433949069E+03,5.73973677696169E+03,5.74662023954810E+03,5.75350472620014E+03,5.76039023587018E+03,5.76727676751271E+03,5.77416432008437E+03,5.78105289254394E+03,5.78794248385229E+03,5.79483309297244E+03,5.80172471886949E+03,5.80861736051066E+03,5.81551101686527E+03,5.82240568690470E+03,5.82930136960245E+03,5.83619806393407E+03,5.84309576887720E+03,5.84999448341153E+03,5.85689420651881E+03,5.86379493718286E+03,5.87069667438952E+03,5.87759941712667E+03,5.88450316438426E+03,5.89140791515422E+03,5.89831366843053E+03,5.90522042320918E+03,5.91212817848816E+03,5.91903693326748E+03,5.92594668654912E+03,5.93285743733708E+03,5.93976918463734E+03,5.94668192745783E+03,5.95359566480849E+03,5.96051039570121E+03,5.96742611914984E+03,5.97434283417019E+03,5.98126053978003E+03,5.98817923499905E+03,5.99509891884890E+03,6.00201959035315E+03,6.00894124853730E+03,6.01586389242877E+03,6.02278752105691E+03,6.02971213345296E+03,6.03663772865007E+03,6.04356430568329E+03,6.05049186358957E+03,6.05742040140773E+03,6.06434991817850E+03,6.07128041294445E+03 };
	if (x > 0 && x <= 1024 && x - (int)x < 1e-30)
		return re[(int)x];
	static double gam1ln_cof[] = { 1.000000000190015, 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.0012086509738662, -0.000005395239385 };
	if (x < 3.72008E-44) return LogGamma1(3.72008E-44);
	double y = x, ser = gam1ln_cof[0];
	for (int i = 1; i < 7; ++i)
		ser += (gam1ln_cof[i] / ++y);
	return log(2.5066282746310005 * ser / x) - (x + 5.5 - (x + 0.5) * log(x + 5.5));
}

/* Incomplete Gamma function */
TARGET double Gamma2(double a, double x)
{
	int n;
	double p, q, d, s, s1, p0, q0, p1, q1, qln;
	if (a <= 0.0 || x < 0.0)
		return -1;

	if (x + 1.0 == 1.0) return 0;
	if (x > 1e+35) return 1;
	qln = q = a * log(x);
	if (x < 1.0 + a)
	{
		p = a;
		d = 1.0 / a;
		s = d;
		for (n = 1; n <= 100; ++n)
		{
			p = 1.0 + p;
			d = d * x / p;
			s = s + d;
			if (abs(d) < abs(s) * 1e-07)
			{
				s *= exp(-x + qln - LogGamma1(a));
				return s;
			}
		}
	}
	else
	{
		s = 1.0 / x;
		p0 = 0.0;
		p1 = 1.0;
		q0 = 1.0;
		q1 = x;
		for (n = 1; n <= 100; ++n)
		{
			p0 = p1 + (n - a) * p0;
			q0 = q1 + (n - a) * q0;
			p = x * p0 + n * p1;
			q = x * q0 + n * q1;
			if (abs(q) + 1.0 != 1.0)
			{
				s1 = p / q;
				p1 = p;
				q1 = q;
				if (abs((s1 - s) / s1) < 1e-07)
				{
					s = exp(log(s1) - x + qln - LogGamma1(a));
					return 1.0 - s;
				}
				s = s1;
			}
			p1 = p;
			q1 = q;
		}
	}
	//s = 1.0 - s * exp(-x) * qq / Gamma1(a);
	s = 1.0 - exp(log(s) - x + qln - LogGamma1(a));
	return s;
}

/* Natural logarithm of incomplete Gamma function */
TARGET double LogGamma2(double a, double x)
{
	int n;
	double p, q, d, s, s1, p0, q0, p1, q1, qq;
	if (a <= 0.0 || x < 0.0)
		return -1;

	if (x + 1.0 == 1.0) return 0;
	if (x > 1e+35) return 1;
	q = a * log(x);
	qq = exp(q);
	if (x < 1.0 + a)
	{
		p = a;
		d = 1.0 / a;
		s = d;
		for (n = 1; n <= 100; ++n)
		{
			p = 1.0 + p;
			d = d * x / p;
			s = s + d;
			if (abs(d) < abs(s) * 1e-07)
			{
				s = s * exp(-x) * qq / Gamma1(a);
				return s;
			}
		}
	}
	else
	{
		s = 1.0 / x;
		p0 = 0.0;
		p1 = 1.0;
		q0 = 1.0;
		q1 = x;
		for (n = 1; n <= 100; ++n)
		{
			p0 = p1 + (n - a) * p0;
			q0 = q1 + (n - a) * q0;
			p = x * p0 + n * p1;
			q = x * q0 + n * q1;
			if (abs(q) + 1.0 != 1.0)
			{
				s1 = p / q;
				p1 = p;
				q1 = q;
				if (abs((s1 - s) / s1) < 1e-07)
				{
					s = s1 * exp(-x) * qq / Gamma1(a);
					return 1.0 - s;
				}
				s = s1;
			}
			p1 = p;
			q1 = q;
		}
	}
	s = 1.0 - s * exp(-x) * qq / Gamma1(a);
	return s;
}

/* Right tail probability of Chi-square distribution */
TARGET double ChiSquareProb(double x2, double df)
{
	if (!x2) return 1;
	if (x2 < 0.0) x2 = -x2;
	return 1.0 - Gamma2(df / 2.0, x2 / 2.0);
}


/* Input a vector, return proportion of grids with exp < threshold and two mininum indices */
TARGET double FindMinIndex(double* exp, int m, int& i1, int& i2, double threshold)
{
	int nle = 0;
	double minval1 = DBL_MAX, minval2 = DBL_MAX;
	i1 = i2 = 0xFFFFFFFF;
	for (int i = 0; i < m; ++i)
	{
		if (exp[i] < threshold)
			nle++;
		if (exp[i] < minval1)
		{
			minval2 = minval1;
			i2 = i1;

			minval1 = exp[i];
			i1 = i;
		}
		else if (exp[i] < minval2)
		{
			minval2 = exp[i];
			i2 = i;
		}
	}

	return nle / (double)m;
}

/* Input a column, return proportion of grids with exp < threshold and two mininum indices */
TARGET double FindMinIndex(double* exp, int m, int n, int& i1, int& j1, int& i2, int& j2, double threshold)
{
	int nle = 0;
	double minval1 = DBL_MAX, minval2 = DBL_MAX;
	i1 = j1 = i2 = j2 = 0xFFFFFFFF;
	for (int i = 0; i < m; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			if (exp[i * n + j] < threshold)
				nle++;
			if (exp[i * n + j] < minval1)
			{
				minval2 = minval1;
				i2 = i1;
				j2 = j1;

				minval1 = exp[i * n + j];
				i1 = i;
				j1 = j;
			}
			else if (exp[i * n + j] < minval2)
			{
				minval2 = exp[i * n + j];
				i2 = i;
				j2 = j;
			}
		}
	}
	return nle / (double)(m * n);
}

/* strcmp two rows */
TARGET int CompareRow(double* obs, int n, int r1, int r2)
{
	for (int j = 0; j < n; ++j)
		if (obs[r1 * n + j] > obs[r2 * n + j]) return 1;
		else if (obs[r1 * n + j] < obs[r2 * n + j]) return -1;
	return 0;
}

/* strcmp two columns */
TARGET int CompareCol(double* obs, int m, int n, int c1, int c2)
{
	for (int i = 0; i < m; ++i)
		if (obs[i * n + c1] > obs[i * n + c2]) return 1;
		else if (obs[i * n + c1] < obs[i * n + c2]) return -1;
	return 0;
}

/* Sort columns */
TARGET void SortCol(double* obs, int m, int n)
{
	for (int i = 0; i < n; ++i)
		for (int j = i + 1; j < n; ++j)
			if (CompareCol(obs, m, n, i, j) > 0)
				for (int k = 0; k < m; ++k)
					Swap(obs[k * n + i], obs[k * n + j]);
}

/* Chi-square test, combine tables with any grid with an expectition < 5 */
TARGET void CombineTable(double* obs, int m, int n, double& g, int& df, double& p, bool test, double* obs2, double* exp, double* exp2, double* rowsum, double* colsum)
{
	{
		SortCol(obs, m, n);
		for (int i = 0; i < m; ++i)
			rowsum[i] = Sum(obs + i * n, n);
		for (int j = 0; j < n; ++j)
			colsum[j] = Sum(obs + j, m, n);

		double invtot = Sum(rowsum, m);

		if (invtot < 0.5) return;
		invtot = 1.0 / invtot;

		for (int i = 0; i < m; ++i)
			for (int j = 0; j < n; ++j)
				exp[i * n + j] = rowsum[i] * colsum[j] * invtot;
	}

	if (m < 2 || n < 2) df = 0;
	else for (;;)
	{
		for (int i = 0; i < m; ++i)
			rowsum[i] = Sum(obs + i * n, n);
		for (int j = 0; j < n; ++j)
			colsum[j] = Sum(obs + j, m, n);

		int i1 = 0, i2 = 0, j1 = 0, j2 = 0;
		double rate = FindMinIndex(exp, m, n, i1, j1, i2, j2, 5.0);

		if (exp[i1 * n + j1] > 1.0 && rate < 0.2)
		{
			df = (m - 1) * (n - 1);
			break;
		}

		if (m == 2 && n == 2)
		{
			df = 0;
			break;
		}

		FindMinIndex(rowsum, m, i1, i2, 5.0);
		FindMinIndex(colsum, n, j1, j2, 5.0);

		int m1 = m, n1 = n;
		if (m > 2 && n > 2)
		{
			if (m >= n)
			{
				m1--;
				j1 = j2 = 0x7FFFFFFF;
			}
			else
			{
				n1--;
				i1 = i2 = 0x7FFFFFFF;
			}
		}
		else if (m > 2)
		{
			m1--;
			j1 = j2 = 0x7FFFFFFF;
		}
		else if (n > 2)
		{
			n1--;
			i1 = i2 = 0x7FFFFFFF;
		}

		SetZero(obs2, m1 * n1);
		SetZero(exp2, m1 * n1);
		for (int i = 0; i < m; ++i)
		{
			int r = i == i1 ? i2 : i;
			r = r > i1 ? r - 1 : r;
			for (int j = 0; j < n; ++j)
			{
				int c = j == j1 ? j2 : j;
				c = c > j1 ? c - 1 : c;
				obs2[r * n1 + c] += obs[i * n + j];
				exp2[r * n1 + c] += exp[i * n + j];
			}
		}

		m = m1; n = n1;
		Swap(obs, obs2);
		Swap(exp, exp2);
	}

	if (df > 0)
	{
		g = 0;
		for (int i = 0; i < m; ++i)
			for (int j = 0; j < n; ++j)
				if (obs[i * n + j] > 0)
					g += 2 * obs[i * n + j] * log(obs[i * n + j] / exp[i * n + j]);

		if (test) 
			p = ChiSquareProb(g, df);
	}
	else
	{
		g = 0;
		p = NAN;
	}
}

/* Factorial */
TARGET double Factorial(int n)
{
	static double f[] =
	{
		1.00000000000000E00, 1.00000000000000E00, 2.00000000000000E00, 6.00000000000000E00, 2.40000000000000E01, 1.20000000000000E02, 7.20000000000000E02, 5.04000000000000E03,
		4.03200000000000E04, 3.62880000000000E05, 3.62880000000000E06, 3.99168000000000E07, 4.79001600000000E08, 6.22702080000000E09, 8.71782912000000E10, 1.30767436800000E12,
		2.09227898880000E13, 3.55687428096000E14, 6.40237370572800E15, 1.21645100408832E17, 2.43290200817664E18, 5.10909421717094E19, 1.12400072777761E21, 2.58520167388850E22,
		6.20448401733239E23, 1.55112100433310E25, 4.03291461126606E26, 1.08888694504184E28, 3.04888344611714E29, 8.84176199373970E30, 2.65252859812191E32, 8.22283865417792E33,
		2.63130836933694E35, 8.68331761881189E36, 2.95232799039604E38, 1.03331479663861E40, 3.71993326789901E41, 1.37637530912263E43, 5.23022617466601E44, 2.03978820811974E46,
		8.15915283247898E47, 3.34525266131638E49, 1.40500611775288E51, 6.04152630633738E52, 2.65827157478845E54, 1.19622220865480E56, 5.50262215981209E57, 2.58623241511168E59,
		1.24139155925361E61, 6.08281864034268E62, 3.04140932017134E64, 1.55111875328738E66, 8.06581751709439E67, 4.27488328406002E69, 2.30843697339241E71, 1.26964033536583E73,
		7.10998587804863E74, 4.05269195048772E76, 2.35056133128288E78, 1.38683118545690E80, 8.32098711274139E81, 5.07580213877225E83, 3.14699732603879E85, 1.98260831540444E87,
		1.26886932185884E89, 8.24765059208247E90, 5.44344939077443E92, 3.64711109181887E94, 2.48003554243683E96, 1.71122452428141E98, 1.19785716699699E100, 8.50478588567862E101,
		6.12344583768861E103, 4.47011546151269E105, 3.30788544151939E107, 2.48091408113954E109, 1.88549470166605E111, 1.45183092028286E113, 1.13242811782063E115, 8.94618213078298E116,
		7.15694570462638E118, 5.79712602074737E120, 4.75364333701284E122, 3.94552396972066E124, 3.31424013456535E126, 2.81710411438055E128, 2.42270953836727E130, 2.10775729837953E132,
		1.85482642257398E134, 1.65079551609085E136, 1.48571596448176E138, 1.35200152767840E140, 1.24384140546413E142, 1.15677250708164E144, 1.08736615665674E146, 1.03299784882391E148,
		9.91677934870949E149, 9.61927596824822E151, 9.42689044888325E153, 9.33262154439442E155, 9.33262154439442E157, 9.42594775983836E159, 9.61446671503513E161, 9.90290071648618E163,
		1.02990167451456E166, 1.08139675824029E168, 1.14628056373471E170, 1.22652020319614E172, 1.32464181945183E174, 1.44385958320249E176, 1.58824554152274E178, 1.76295255109025E180,
		1.97450685722107E182, 2.23119274865981E184, 2.54355973347219E186, 2.92509369349301E188, 3.39310868445190E190, 3.96993716080872E192, 4.68452584975429E194, 5.57458576120761E196,
		6.68950291344913E198, 8.09429852527344E200, 9.87504420083360E202, 1.21463043670253E205, 1.50614174151114E207, 1.88267717688893E209, 2.37217324288005E211, 3.01266001845766E213,
		3.85620482362581E215, 4.97450422247729E217, 6.46685548922047E219, 8.47158069087881E221, 1.11824865119600E224, 1.48727070609068E226, 1.99294274616152E228, 2.69047270731805E230,
		3.65904288195255E232, 5.01288874827499E234, 6.91778647261948E236, 9.61572319694109E238, 1.34620124757175E241, 1.89814375907617E243, 2.69536413788816E245, 3.85437071718007E247,
		5.55029383273931E249, 8.04792605747199E251, 1.17499720439091E254, 1.72724589045464E256, 2.55632391787286E258, 3.80892263763057E260, 5.71338395644586E262, 8.62720977423324E264,
		1.31133588568345E267, 2.00634390509568E269, 3.08976961384735E271, 4.78914290146339E273, 7.47106292628289E275, 1.17295687942641E278, 1.85327186949373E280, 2.94670227249504E282,
		4.71472363599206E284, 7.59070505394722E286, 1.22969421873945E289, 2.00440157654530E291, 3.28721858553430E293, 5.42391066613158E295, 9.00369170577843E297, 1.50361651486500E300,
		2.52607574497320E302, 4.26906800900471E304, 7.25741561530800E306
	};
	if (n <= 170) return f[n];
	return NAN;
}

/* Binomial coefficient */
TARGET double Binomial(int n, int r)
{
	if (n <= 170)
		return Factorial(n) / Factorial(r) / Factorial(n - r);
	else
		return exp(LogGamma1(n + 1) - LogGamma1(r + 1) - LogGamma1(n - r + 1));
}

/* Natural logarithm of binomial coefficient */
TARGET double LogBinomial(int n, int r)
{
	return LogGamma1(n + 1) - LogGamma1(r + 1) - LogGamma1(n - r + 1);
}

/* Initialize BINOMIAL global variable */
TARGET void InitBinomial()
{
	for (int i = 0; i <= N_MAX_PLOIDY; ++i)
		for (int j = 0; j <= i; ++j)
			BINOMIAL[i][j] = (int)(Binomial(i, j) + 0.5);
}
